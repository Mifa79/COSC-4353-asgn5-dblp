import java.io.IOException;
import java.io.Reader;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.stream.*;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.json.simple.JSONArray;
import org.json.JSONException;
import java.util.*;
import java.util.Optional;
import java.io.*;

import static java.util.stream.Collectors.*;


public class Main {
	 public static void main(String args[]) {
		 
		  Scanner fileIn = null;
		  int n = 0;


	        try {
	            Scanner keyboard = new Scanner(System.in);
	            System.out.println("Enter the value of n: ");
	            n = keyboard.nextInt();


	        } catch (InputMismatchException e) {
	            System.out.println("Invalid input.");
	        }
		 
		 JSONParser parser = new JSONParser();
		 
//		 try {
//			 JSONObject json = (JSONObject) parser.parse("{\"venue\":{\"raw\":\"AMIF\"},\"forKeyword\":1,\"issue\":\"\",\"year\":2009,\"doc_type\":\"\",\"fos\":[{\"w\":0.4178039,\"name\":\"Lernaean Hydra\"},{\"w\":0.4269269,\"name\":\"Database\"},{\"w\":0.415332377,\"name\":\"World Wide Web\"},{\"w\":0.459045082,\"name\":\"Ontology (information science)\"},{\"w\":0.399807781,\"name\":\"Computer science\"},{\"w\":0.5905041,\"name\":\"Middleware\"},{\"w\":0.5440575,\"name\":\"Ambient intelligence\"}],\"title\":\"Ontologies in HYDRA Computer - Middleware for Ambient Intelligent Devices.\",\"n_citation\":2,\"volume\":\"\",\"page_end\":\"46\",\"page_start\":\"43\",\"publisher\":\"\",\"id\":\"100001334\",\"forCompute\":1,\"authors\":[{\"name\":\"Peter Kostelnik\",\"id\":\"2702511795\"},{\"name\":\"Martin Sarnovsky\",\"id\":\"2041014688\"},{\"name\":\"Jan Hreno\",\"id\":\"2398560122\"}]}");
//			 JSONArray arr = spreadArray(json);
//			 System.out.println(arr);
//		 } catch (ParseException $e) {
//			 
//		 }
		 
//		 try {
//			 JSONObject json = (JSONObject) parser.parse("{\"phonetype\":\"N95\",\"cat\":\"WP\",\"ref\":[1,2]}");
////			 System.out.println(json.get("phonetype"));
////			 String title = (String)json.get("ref");
////			 if (title.contains("N95")) {
////					String key = "contains keywords";
////					String value = "true";
////					json.put(key, value);
////			 }
//			 
//			JSONArray references = (JSONArray)json.get("ref");
//			for (int i = 0; i < references.size(); i++) {
////				String t = (String)references.get(i);
//				System.out.println(references.get(i));
//			}
////			 System.out.println(json);
//		 } catch (ParseException $e) {
//		 }
		 
		
		 
		    String keyword = "Computer";
		 
			String fileName = "sample_1.txt";
	
			try (Stream<String> stream = Files.lines(Paths.get(fileName))) {
				Stream<JSONObject> orgJSonStream = stream.parallel().map(line -> {
			    	 try {
						 JSONObject json = (JSONObject) parser.parse(line);
						 return json;
					 } catch (ParseException $e) {
						 throw new RuntimeException($e);
					 }
			    });

				Stream<JSONObject> jSonStream  = orgJSonStream.map(obj -> {
					String title = (String)obj.get("title");
					if (title.toLowerCase().contains(keyword.toLowerCase())) {
						obj.put("forKeyword", 1);
						obj.put("forCompute", 1);
						obj.put("forCited", 0);
					}
					return obj;
				});
				
				
				
				
				for (int i = 0; i < n; i++) {
//					System.out.println("test");
					//Spread references with main object to arr
					jSonStream = jSonStream.parallel().map(item -> {
						return spreadArray(item);
					})
					//Flat map the whole thing giant array
					.flatMap(JSONArray::stream);
					
					
					//Merge duplicate
					List<JSONObject> jsonList = jSonStream.parallel().collect(Collectors.collectingAndThen(
							Collectors.groupingBy(item -> ((JSONObject) item).get("id"),
								Collectors.collectingAndThen(
									Collectors.reducing((item1, item2) -> {
										return combine(item1, item2);
									}), Optional::get
								))
							, m -> new ArrayList<>(m.values())
						));
					
					jSonStream = jsonList.stream();
				}
				
				jSonStream = jSonStream.parallel().filter(item -> {
					return item.containsKey("forCited");
				})
					.sequential().sorted((Comparator.comparing(item -> {
					return (int)((JSONObject)item).get("forCited");
				}).reversed()));
				
				
				try {
					PrintWriter outputStream = new PrintWriter(new FileOutputStream("output.txt"));
					jSonStream.forEach(obj -> {
						outputStream.println(obj);
					});
					outputStream.close();
				} 
				catch (FileNotFoundException e) {
					System.out.println("Error opening the file output.txt");
					System.exit(0);
					
				}
				
					

						
	        } catch (IOException e) {
	            e.printStackTrace();
	        }
		 
	 }
					

	 
	 public static JSONObject combine(JSONObject item1, JSONObject item2) {
		 int cited = item1.containsKey("forCited") ? (int)item1.get("forCited") : 0;
			cited += item2.containsKey("forCited") ? (int)item2.get("forCited") : 0;
			
			boolean forCompute = item1.containsKey("forCompute");
			forCompute = forCompute ? forCompute : item2.containsKey("forCompute");
			
			if (item1.containsKey("title")) {
				item1.put("forCited", cited);
				if (forCompute)
					item1.put("forCompute", 1);
				return item1;
			} else {
				item2.put("forCited", cited);
				if (forCompute)
					item2.put("forCompute", 1);
				return item2;
			}
	 }
	 
	 public static JSONArray spreadArray(JSONObject item) {
		JSONArray arr = new JSONArray();
			
		if (item.containsKey("forCompute")) {
			JSONArray references = (JSONArray)item.get("references");
			if (references == null)
				references = new JSONArray();
			
			for (int i = 0; i < references.size(); i++) {
				JSONObject obj = new JSONObject();
				obj.put("id", references.get(i));
				obj.put("forCited", 1);
				obj.put("forCompute", 1);
				arr.add(obj);
			}
			
			item.remove("forCompute");
		}
		
		arr.add(item);
		return arr;
	 }
	 
	 public static JSONArray concatArray(JSONArray arr1, JSONArray arr2) throws JSONException {
		    JSONArray result = new JSONArray();
		    for (int i = 0; i < arr1.size(); i++) {
		        result.add(arr1.get(i));
		    }
		    for (int i = 0; i < arr2.size(); i++) {
		        result.add(arr2.get(i));
		    }
		    return result;
		}
}


	        
	 
